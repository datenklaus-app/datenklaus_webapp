from student.models import Student


class LessonState:
    def next_state(self, student: Student) -> int:
        """
        Returns the next (numerical) state which succeeds this state
        within the lesson. Note, this returns a state based on the
        user's input. Hence this function must be called after parsing
        the associated POST request

        :param student: The student who requested the next state
        :return: Succeeding state
        :raises LessonStateError: If state is missing information from preceding state(s)
        """
        raise NotImplementedError()

    def html(self, request, student: Student) -> str:
        """
        :param request: Current request
        :param student: The student who requested the next state
        :return: HTML representation of the current state (card) which is
        used by the view
        :raises LessonStateError:
        """
        raise NotImplementedError()

    def handle_post(self, post, student):
        """
        Handles an incoming post request which contains the form data generated by
        the associated card.
        :param post:
        :param student:
        :return:
        :raises InvalidCardError:
        :raises LessonStateError:
        """
        raise NotImplementedError()

    @staticmethod
    def get_results(student):
        """
        :param student: Student for which to get results for
        :return: Dictionary containing the student's results
        :raises LessonSateError: If state has not been finished yet
        """
        raise NotImplementedError()

    class LessonStateError(Exception):
        """
        Raised when the state is missing information from a previous
        state.
        :var fallback_state: Stores the state which has not been executed
        by the user and should therefore be returned by the request.
        """

        def __init__(self, fallback_state):
            self.fallback_state = fallback_state
